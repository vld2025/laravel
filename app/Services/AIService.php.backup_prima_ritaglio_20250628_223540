<?php

namespace App\Services;

use OpenAI;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;
use Imagick;
use ImagickException;

class AIService
{
    protected $client;

    public function __construct()
    {
        $this->client = OpenAI::client(config('openai.api_key'));
    }

    public function extractDataFromReceipt(string $filePath): array
    {
        try {
            // Usa il disk 'public' per i file caricati da Filament
            $publicDisk = Storage::disk('public');

            Log::info('AI Processing attempt', [
                'input_path' => $filePath,
                'file_exists' => $publicDisk->exists($filePath)
            ]);

            if (!$publicDisk->exists($filePath)) {
                throw new \Exception("File non trovato: {$filePath}");
            }

            $fileContent = $publicDisk->get($filePath);
            $mimeType = $publicDisk->mimeType($filePath);

            Log::info('AI Processing file found', [
                'mime_type' => $mimeType,
                'file_size' => strlen($fileContent)
            ]);

            // Se è un PDF, convertilo in immagine
            if ($mimeType === 'application/pdf' || str_ends_with(strtolower($filePath), '.pdf')) {
                Log::info('Converting PDF to image');

                $imageData = $this->convertPdfToImage($fileContent);
                if (!$imageData) {
                    throw new \Exception('Errore nella conversione PDF→immagine');
                }

                $fileContent = $imageData['content'];
                $mimeType = $imageData['mime_type'];

                Log::info('PDF converted successfully', [
                    'new_mime_type' => $mimeType,
                    'new_size' => strlen($fileContent)
                ]);
            }

            // Processa come immagine
            $base64 = base64_encode($fileContent);

            $supportedMimeTypes = [
                'image/jpeg' => 'image/jpeg',
                'image/jpg' => 'image/jpeg',
                'image/png' => 'image/png',
                'image/gif' => 'image/gif',
                'image/webp' => 'image/webp'
            ];

            if (!isset($supportedMimeTypes[$mimeType])) {
                $imageInfo = @getimagesizefromstring($fileContent);
                if ($imageInfo !== false) {
                    $mimeType = $imageInfo['mime'];
                    Log::info('MIME corrected', ['new_mime' => $mimeType]);
                }
            }

            if (!isset($supportedMimeTypes[$mimeType])) {
                throw new \Exception("Tipo file non supportato: {$mimeType}");
            }

            $actualMimeType = $supportedMimeTypes[$mimeType];

            Log::info('Sending to OpenAI', ['mime_type' => $actualMimeType]);

            $response = $this->client->chat()->create([
                'model' => 'gpt-4o',
                'messages' => [
                    [
                        'role' => 'user',
                        'content' => [
                            [
                                'type' => 'text',
                                'text' => 'Analizza questo documento e estrai le seguenti informazioni in formato JSON:
                                {
                                    "importo": numero_decimale,
                                    "descrizione": "descrizione_italiana_breve",
                                    "data_emissione": "YYYY-MM-DD se visibile",
                                    "data_scadenza": "YYYY-MM-DD se visibile", 
                                    "fornitore": "nome_fornitore se visibile",
                                    "numero_documento": "numero fattura/ricevuta se visibile",
                                    "tutto_il_testo": "tutto il testo che riesci a leggere nel documento"
                                }

                                Regole:
                                - Importo deve essere solo numero decimale (es: 125.50)
                                - Descrizione breve in italiano
                                - Date in formato YYYY-MM-DD
                                - tutto_il_testo deve contenere TUTTO quello che riesci a leggere
                                - Se non trovi un dato, metti null
                                - Rispondi SOLO con JSON, nient\'altro'
                            ],
                            [
                                'type' => 'image_url',
                                'image_url' => [
                                    'url' => "data:{$actualMimeType};base64,{$base64}"
                                ]
                            ]
                        ]
                    ]
                ],
                'max_tokens' => 1000,
                'temperature' => 0.1
            ]);

            $content = trim($response->choices[0]->message->content);
            $content = preg_replace('/```json\s*/', '', $content);
            $content = preg_replace('/```\s*$/', '', $content);

            Log::info('OpenAI Response', ['content' => $content]);

            $data = json_decode($content, true);

            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new \Exception('Risposta AI non valida: ' . $content);
            }

            $result = [
                'importo' => isset($data['importo']) && is_numeric($data['importo']) ? (float)$data['importo'] : null,
                'descrizione' => $data['descrizione'] ?? null,
                'data' => $data['data_emissione'] ?? null, // Per compatibilità
                'data_emissione' => $data['data_emissione'] ?? null,
                'data_scadenza' => $data['data_scadenza'] ?? null,
                'fornitore' => $data['fornitore'] ?? null,
                'numero_documento' => $data['numero_documento'] ?? null,
                'tutto_il_testo' => $data['tutto_il_testo'] ?? null,
                'success' => true,
                'raw_response' => $content
            ];

            Log::info('AI Processing successful', $result);
            return $result;

        } catch (\Exception $e) {
            Log::error('AI Service Error: ' . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);

            return [
                'importo' => null,
                'descrizione' => 'Errore AI: ' . $e->getMessage(),
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    private function convertPdfToImage(string $pdfContent): ?array
    {
        try {
            $imagick = new Imagick();

            // Configura per migliore qualità
            $imagick->setResolution(300, 300); // Aumentata risoluzione per miglior OCR

            // Carica il PDF dalla stringa
            $imagick->readImageBlob($pdfContent);

            // Prendi solo la prima pagina
            $imagick->setIteratorIndex(0);

            // Converti in formato PNG per migliore qualità OCR
            $imagick->setImageFormat('png');

            // MIGLIORAMENTI PER DOCUMENTO PULITO
            // Migliora contrasto e nitidezza
            $imagick->contrastImage(true);
            $imagick->sharpenImage(0, 1);
            
            // Riduce rumore se presente
            $imagick->despeckleImage();
            
            // Migliora la leggibilità
            $imagick->normalizeImage();

            // Ottieni i dati dell'immagine migliorata
            $imageBlob = $imagick->getImageBlob();

            $imagick->clear();
            $imagick->destroy();

            return [
                'content' => $imageBlob,
                'mime_type' => 'image/png'
            ];

        } catch (ImagickException $e) {
            Log::error('PDF to Image conversion error: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * Migliora un'immagine per una migliore leggibilità
     */
    private function enhanceImage(string $imageContent): ?string
    {
        try {
            $imagick = new Imagick();
            $imagick->readImageBlob($imageContent);

            // MIGLIORAMENTI IMMAGINE
            // Auto-raddrizza se inclinata
            $imagick->deskewImage(40);
            
            // Migliora contrasto
            $imagick->contrastImage(true);
            
            // Riduce rumore
            $imagick->despeckleImage();
            
            // Aumenta nitidezza
            $imagick->sharpenImage(0, 1);
            
            // Normalizza luminosità
            $imagick->normalizeImage();

            $enhancedBlob = $imagick->getImageBlob();
            
            $imagick->clear();
            $imagick->destroy();
            
            return $enhancedBlob;

        } catch (ImagickException $e) {
            Log::error('Image enhancement error: ' . $e->getMessage());
            return null;
        }
    }

    public function isConfigured(): bool
    {
        return !empty(config('openai.api_key')) && config('openai.api_key') !== 'your_openai_api_key_here';
    }

    /**
     * Elabora e migliora un documento usando ChatGPT Vision
     * Ora salva anche l'immagine migliorata
     */
    public function processDocumentScan(string $filePath): array
    {
        try {
            Log::info("Document scan processing started", ['file' => $filePath]);

            $publicDisk = Storage::disk('public');
            
            if (!$publicDisk->exists($filePath)) {
                throw new \Exception("File non trovato: {$filePath}");
            }

            // Leggi il file originale
            $originalContent = $publicDisk->get($filePath);
            $mimeType = $publicDisk->mimeType($filePath);

            // Migliora l'immagine se possibile
            $enhancedContent = null;
            if (str_starts_with($mimeType, 'image/')) {
                $enhancedContent = $this->enhanceImage($originalContent);
                
                if ($enhancedContent) {
                    // Salva l'immagine migliorata sostituendo l'originale
                    $publicDisk->put($filePath, $enhancedContent);
                    Log::info("Enhanced image saved", ['file' => $filePath]);
                }
            }

            // Estrai dati dal documento (ora migliorato)
            $result = $this->extractDataFromReceipt($filePath);

            // Restituisci risultato completo
            return [
                "success" => $result["success"],
                "document_detected" => true,
                "enhanced_image_saved" => $enhancedContent !== null,
                "improvements_applied" => array_merge(
                    $enhancedContent ? ["Image enhancement", "Deskew", "Contrast", "Noise reduction"] : [],
                    $result["success"] ? ["OCR processing", "Data extraction"] : []
                ),
                "confidence" => $result["success"] ? 0.9 : 0.0,
                "notes" => $result["success"] ? "Documento processato e migliorato con successo" : "Processing fallito",
                "extracted_data" => $result
            ];

        } catch (\Exception $e) {
            Log::error("Document scan error: " . $e->getMessage());

            return [
                "success" => false,
                "error" => $e->getMessage(),
                "enhanced_image_saved" => false,
                "improvements_applied" => []
            ];
        }
    }
}
