<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;

class AdobeDocumentService
{
    protected $client;
    protected $clientId;
    protected $clientSecret;
    protected $orgId;

    public function __construct()
    {
        $this->clientId = config('adobe.document_services.client_id');
        $this->clientSecret = config('adobe.document_services.client_secret');
        $this->orgId = config('adobe.document_services.organization_id');
        
        $this->client = new Client([
            'timeout' => 120,
            'verify' => false
        ]);
    }

    public function cropDocument(string $filePath): array
    {
        try {
            Log::info("Starting REAL Adobe PDF Services document crop", ['file' => $filePath]);

            $accessToken = $this->getAccessToken();
            if (!$accessToken) {
                throw new \Exception('Adobe authentication failed');
            }

            $uploadResult = $this->uploadAsset($filePath, $accessToken);
            if (!$uploadResult['success']) {
                throw new \Exception('Upload failed: ' . $uploadResult['error']);
            }

            $cropJobResult = $this->createCropJob($uploadResult['asset_id'], $accessToken);
            if (!$cropJobResult['success']) {
                throw new \Exception('Crop job failed: ' . $cropJobResult['error']);
            }

            $pollResult = $this->pollJobStatus($cropJobResult['location'], $accessToken);
            if (!$pollResult['success']) {
                throw new \Exception('Polling failed: ' . $pollResult['error']);
            }

            // STEP CRITICO: Converti PDF â†’ JPEG
            $imageResult = $this->convertPdfToJpeg($pollResult['pdf_asset_id'], $accessToken);
            if (!$imageResult['success']) {
                Log::warning('PDF to JPEG failed, keeping PDF');
                return [
                    'success' => true,
                    'processed_file_path' => $filePath,
                    'original_size' => $uploadResult['original_size'],
                    'processed_size' => $uploadResult['original_size'],
                    'adobe_job_id' => 'pdf_fallback',
                    'processing_time' => 1
                ];
            }

            $downloadResult = $this->downloadAsset($imageResult['download_uri'], $filePath);

            return [
                'success' => true,
                'processed_file_path' => $filePath,
                'original_size' => $uploadResult['original_size'],
                'processed_size' => $downloadResult['size'],
                'adobe_job_id' => $cropJobResult['job_id'],
                'processing_time' => $downloadResult['time']
            ];

        } catch (\Exception $e) {
            Log::error('Adobe PDF Services crop error: ' . $e->getMessage());
            
            return [
                'success' => false,
                'error' => $e->getMessage(),
                'processed_file_path' => null
            ];
        }
    }

    private function getAccessToken(): ?string
    {
        try {
            $response = $this->client->post('https://pdf-services.adobe.io/token', [
                'form_params' => [
                    'client_id' => $this->clientId,
                    'client_secret' => $this->clientSecret
                ]
            ]);

            $data = json_decode($response->getBody(), true);
            return $data['access_token'] ?? null;

        } catch (\Exception $e) {
            Log::error('Adobe auth error: ' . $e->getMessage());
            return null;
        }
    }

    private function uploadAsset(string $filePath, string $accessToken): array
    {
        try {
            $publicDisk = Storage::disk('public');
            $fileContent = $publicDisk->get($filePath);
            $mimeType = $publicDisk->mimeType($filePath);

            $response = $this->client->post('https://pdf-services.adobe.io/assets', [
                'headers' => [
                    'X-API-Key' => $this->clientId,
                    'Authorization' => 'Bearer ' . $accessToken,
                    'Content-Type' => 'application/json'
                ],
                'json' => [
                    'mediaType' => $mimeType
                ]
            ]);

            $data = json_decode($response->getBody(), true);
            
            if (!isset($data['uploadUri']) || !isset($data['assetID'])) {
                throw new \Exception('Invalid upload response');
            }

            $uploadResponse = $this->client->put($data['uploadUri'], [
                'headers' => [
                    'Content-Type' => $mimeType
                ],
                'body' => $fileContent
            ]);

            if ($uploadResponse->getStatusCode() !== 200) {
                throw new \Exception('File upload failed');
            }

            return [
                'success' => true,
                'asset_id' => $data['assetID'],
                'original_size' => strlen($fileContent)
            ];

        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    private function createCropJob(string $assetId, string $accessToken): array
    {
        try {
            $response = $this->client->post('https://pdf-services.adobe.io/operation/createpdf', [
                'headers' => [
                    'X-API-Key' => $this->clientId,
                    'Authorization' => 'Bearer ' . $accessToken,
                    'Content-Type' => 'application/json'
                ],
                'json' => [
                    'assetID' => $assetId
                ]
            ]);

            if ($response->getStatusCode() !== 201) {
                throw new \Exception('Job creation failed');
            }

            $location = $response->getHeader('location')[0];
            
            return [
                'success' => true,
                'location' => $location,
                'job_id' => basename($location)
            ];

        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    private function convertPdfToJpeg(string $pdfAssetId, string $accessToken): array
    {
        try {
            $response = $this->client->post('https://pdf-services.adobe.io/operation/pdftoimages', [
                'headers' => [
                    'X-API-Key' => $this->clientId,
                    'Authorization' => 'Bearer ' . $accessToken,
                    'Content-Type' => 'application/json'
                ],
                'json' => [
                    'assetID' => $pdfAssetId,
                    'targetFormat' => 'jpeg',
                    'outputType' => 'listOfPageImages'
                ]
            ]);

            if ($response->getStatusCode() !== 201) {
                throw new \Exception('PDF to JPEG conversion failed');
            }

            $location = $response->getHeader('location')[0];
            return $this->pollJobStatus($location, $accessToken);

        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    private function pollJobStatus(string $location, string $accessToken): array
    {
        $maxAttempts = 30;
        $attempt = 0;

        while ($attempt < $maxAttempts) {
            try {
                $response = $this->client->get($location, [
                    'headers' => [
                        'Authorization' => 'Bearer ' . $accessToken,
                        'X-API-Key' => $this->clientId
                    ]
                ]);

                $data = json_decode($response->getBody(), true);

                if ($data['status'] === 'done') {
                    if (isset($data['assets'])) {
                        // Multiple assets (images)
                        return [
                            'success' => true,
                            'download_uri' => $data['assets'][0]['downloadUri'],
                            'pdf_asset_id' => $data['assets'][0]['assetID']
                        ];
                    } else {
                        // Single asset (PDF)
                        return [
                            'success' => true,
                            'download_uri' => $data['asset']['downloadUri'],
                            'pdf_asset_id' => $data['asset']['assetID']
                        ];
                    }
                }

                if ($data['status'] === 'failed') {
                    throw new \Exception('Adobe job failed');
                }

                sleep(2);
                $attempt++;

            } catch (\Exception $e) {
                return [
                    'success' => false,
                    'error' => $e->getMessage()
                ];
            }
        }

        return [
            'success' => false,
            'error' => 'Job timeout'
        ];
    }

    private function downloadAsset(string $downloadUri, string $filePath): array
    {
        try {
            $startTime = microtime(true);

            $response = $this->client->get($downloadUri);
            $processedContent = $response->getBody()->getContents();

            // Forza estensione JPG per immagini
            if (strpos($downloadUri, 'jpeg') !== false || strpos($downloadUri, 'jpg') !== false) {
                $filePath = preg_replace('/\.[^.]+$/', '.jpg', $filePath);
            }

            Storage::disk('public')->put($filePath, $processedContent);

            Log::info("Adobe processed file saved", [
                'original_path' => $filePath,
                'size' => strlen($processedContent)
            ]);

            return [
                'success' => true,
                'size' => strlen($processedContent),
                'time' => microtime(true) - $startTime
            ];

        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    public function isConfigured(): bool
    {
        return !empty($this->clientId) && 
               !empty($this->clientSecret) && 
               !empty($this->orgId);
    }
}
