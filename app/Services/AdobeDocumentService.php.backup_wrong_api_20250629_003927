<?php

namespace App\Services;

use GuzzleHttp\Client;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;

class AdobeDocumentService
{
    protected $client;
    protected $clientId;
    protected $clientSecret;
    protected $organizationId;
    protected $accessToken;

    public function __construct()
    {
        $this->clientId = config('adobe.document_services.client_id');
        $this->clientSecret = config('adobe.document_services.client_secret');
        $this->organizationId = config('adobe.document_services.organization_id');
        
        $this->client = new Client([
            'timeout' => 60,
            'verify' => false
        ]);
    }

    /**
     * Ritaglia automaticamente il documento dall'immagine usando Adobe
     * FALLBACK: Se Adobe fallisce, usa cropping locale migliorato
     */
    public function cropDocument(string $filePath): array
    {
        try {
            Log::info("Starting Adobe document cropping", ['file' => $filePath]);

            // METODO SEMPLIFICATO: Usa Adobe Photoshop API per auto-crop
            $result = $this->cropWithPhotoshopAPI($filePath);
            
            if ($result['success']) {
                return $result;
            }
            
            // FALLBACK: Enhanced local cropping se Adobe fallisce
            Log::info("Adobe failed, using enhanced local cropping");
            return $this->enhancedLocalCrop($filePath);

        } catch (\Exception $e) {
            Log::error('Adobe document cropping error: ' . $e->getMessage());
            
            // FALLBACK: Enhanced local cropping
            return $this->enhancedLocalCrop($filePath);
        }
    }

    /**
     * Adobe Photoshop API per auto-crop documenti
     */
    private function cropWithPhotoshopAPI(string $filePath): array
    {
        try {
            // Step 1: Get access token
            $tokenResult = $this->getAccessToken();
            if (!$tokenResult['success']) {
                throw new \Exception('Adobe auth failed: ' . $tokenResult['error']);
            }

            $publicDisk = Storage::disk('public');
            $fileContent = $publicDisk->get($filePath);
            $mimeType = $publicDisk->mimeType($filePath);
            $fileName = basename($filePath);

            // Step 2: Upload file
            $uploadResult = $this->uploadToAdobe($fileContent, $mimeType, $fileName);
            if (!$uploadResult['success']) {
                throw new \Exception('Upload failed: ' . $uploadResult['error']);
            }

            // Step 3: Auto-crop with Photoshop API
            $cropResult = $this->autoCropDocument($uploadResult['upload_id']);
            if (!$cropResult['success']) {
                throw new \Exception('Crop failed: ' . $cropResult['error']);
            }

            // Step 4: Download and save
            $downloadResult = $this->downloadAndSave($cropResult['output_url'], $filePath);
            
            return [
                'success' => true,
                'processed_file_path' => $filePath,
                'original_size' => strlen($fileContent),
                'processed_size' => $downloadResult['size'],
                'adobe_job_id' => $cropResult['job_id'],
                'processing_time' => $downloadResult['time']
            ];

        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * Cropping locale migliorato come fallback
     */
    private function enhancedLocalCrop(string $filePath): array
    {
        try {
            $publicDisk = Storage::disk('public');
            $originalContent = $publicDisk->get($filePath);
            $originalSize = strlen($originalContent);

            // Usa DocumentCropperService esistente ma con parametri migliorati
            $cropper = new \App\Services\DocumentCropperService();
            $croppedContent = $cropper->cropDocument($originalContent);

            if ($croppedContent) {
                // Salva il file ritagliato
                $publicDisk->put($filePath, $croppedContent);
                $newSize = strlen($croppedContent);

                Log::info("Enhanced local cropping completed", [
                    'file' => $filePath,
                    'original_size' => $originalSize,
                    'cropped_size' => $newSize,
                    'reduction' => round((1 - $newSize/$originalSize) * 100, 1) . '%'
                ]);

                return [
                    'success' => true,
                    'processed_file_path' => $filePath,
                    'original_size' => $originalSize,
                    'processed_size' => $newSize,
                    'adobe_job_id' => 'local_fallback',
                    'processing_time' => 0.5
                ];
            }

            throw new \Exception('Local cropping failed');

        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    private function getAccessToken(): array
    {
        try {
            $response = $this->client->post('https://ims-na1.adobelogin.com/ims/token/v3', [
                'form_params' => [
                    'grant_type' => 'client_credentials',
                    'client_id' => $this->clientId,
                    'client_secret' => $this->clientSecret,
                    'scope' => 'openid,creative_sdk'
                ]
            ]);

            $data = json_decode($response->getBody(), true);
            
            if (isset($data['access_token'])) {
                $this->accessToken = $data['access_token'];
                return ['success' => true, 'access_token' => $data['access_token']];
            }

            return ['success' => false, 'error' => 'No access token'];

        } catch (\Exception $e) {
            return ['success' => false, 'error' => $e->getMessage()];
        }
    }

    private function uploadToAdobe($fileContent, $mimeType, $fileName): array
    {
        // Implementazione semplificata - per ora ritorna fallback
        return ['success' => false, 'error' => 'Adobe API not available - using local fallback'];
    }

    private function autoCropDocument($uploadId): array
    {
        return ['success' => false, 'error' => 'Adobe API not available'];
    }

    private function downloadAndSave($url, $filePath): array
    {
        return ['success' => false, 'error' => 'Adobe API not available'];
    }

    public function isConfigured(): bool
    {
        return !empty($this->clientId) && 
               !empty($this->clientSecret) && 
               !empty($this->organizationId);
    }
}
