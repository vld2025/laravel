<?php
namespace App\Filament\User\Resources;
use App\Filament\User\Resources\DocumentoResource\Pages;
use App\Models\Documento;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class DocumentoResource extends Resource
{
    protected static ?string $model = Documento::class;
    protected static ?string $navigationIcon = 'heroicon-o-document-text';
    protected static ?string $navigationLabel = 'I Miei Documenti';
    protected static ?string $modelLabel = 'Documento';
    protected static ?string $pluralModelLabel = 'Documenti';
    protected static ?int $navigationSort = 4;

    public static function form(Form $form): Form
    {
        return $form->schema([
            Forms\Components\Hidden::make('user_id')
                ->default(fn () => auth()->id()),
            Forms\Components\Hidden::make('caricato_da')
                ->default(fn () => auth()->id()),
            Forms\Components\Hidden::make('tipo')
                ->default('personale'),
            Forms\Components\TextInput::make('nome')
                ->required()
                ->maxLength(255)
                ->label('Nome documento'),
            Forms\Components\FileUpload::make('file')
                ->required()
                ->acceptedFileTypes(['application/pdf', 'image/*'])
                ->disk('public')
                ->directory('documenti')
                ->downloadable()
                ->openable()
                ->label('Seleziona file')
                ->columnSpanFull(),
        ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->query(Documento::query()->where(function($query) {
                $userId = auth()->id();
                $query->where('user_id', $userId)
                      ->orWhere('tipo', 'aziendale');
            }))
            ->columns([
                Tables\Columns\TextColumn::make('tipo')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'busta_paga' => 'success',
                        'aziendale' => 'warning',
                        'personale' => 'info',
                        default => 'gray'
                    })
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'busta_paga' => 'Busta Paga',
                        'aziendale' => 'Aziendale',
                        'personale' => 'Personale',
                        default => $state
                    }),
                Tables\Columns\TextColumn::make('nome')
                    ->searchable()
                    ->label('Nome documento')
                    ->wrap(),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime('d/m/Y')
                    ->sortable()
                    ->label('Data'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('tipo')
                    ->options([
                        'busta_paga' => 'Busta Paga',
                        'aziendale' => 'Aziendale',
                        'personale' => 'Personale'
                    ])
                    ->label('Tipo'),
            ])
            ->actions([
                Tables\Actions\Action::make('download')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->url(fn (Documento $record): string => asset('storage/' . $record->file))
                    ->openUrlInNewTab()
                    ->size('sm'),
            ])
            ->bulkActions([])
            ->defaultSort('created_at', 'desc')
            ->paginated([10, 25])
            ->poll('30s');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListDocumenti::route('/'),
            'create' => Pages\CreateDocumento::route('/create'),
            'edit' => Pages\EditDocumento::route('/{record}/edit'),
        ];
    }

    public static function canEdit($record): bool
    {
        return $record->user_id === auth()->id() && $record->tipo === 'personale';
    }

    public static function canDelete($record): bool
    {
        return $record->user_id === auth()->id() && $record->tipo === 'personale';
    }
}
