<?php
namespace App\Filament\User\Resources;
use App\Filament\User\Resources\DocumentoResource\Pages;
use App\Models\Documento;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Storage;

class DocumentoResource extends Resource
{
    protected static ?string $model = Documento::class;
    protected static ?string $navigationIcon = 'heroicon-o-document-text';
    protected static ?string $navigationLabel = 'I Miei Documenti';
    protected static ?string $modelLabel = 'Documento';
    protected static ?string $pluralModelLabel = 'Documenti';
    protected static ?int $navigationSort = 4;

    public static function form(Form $form): Form
    {
        return $form->schema([
            Forms\Components\Hidden::make('user_id')
                ->default(fn () => auth()->id()),
            Forms\Components\Hidden::make('caricato_da')
                ->default(fn () => auth()->id()),
            Forms\Components\Hidden::make('tipo')
                ->default('personale'),
            Forms\Components\TextInput::make('nome')
                ->required()
                ->maxLength(255)
                ->label('Nome documento'),
            Forms\Components\FileUpload::make('file')
                ->required()
                ->acceptedFileTypes(['application/pdf', 'image/*'])
                ->disk('public')
                ->directory('documenti')
                ->downloadable()
                ->openable()
                ->label('Seleziona file o scansiona documento')
                ->columnSpanFull()
                ->extraAttributes([
                    'id' => 'documento-file-upload'
                ]),
        ]);
    }

    public static function table(Table $table): Table
    {
        $user = auth()->user();

        if ($user->isAdmin() || $user->isManager()) {
            return $table
                ->columns([
                    Tables\Columns\TextColumn::make('user.name')
                        ->sortable()
                        ->searchable()
                        ->label('Utente'),
                    Tables\Columns\TextColumn::make('tipo')
                        ->badge()
                        ->color(fn (string $state): string => match ($state) {
                            'busta_paga' => 'success',
                            'aziendale' => 'warning',
                            'personale' => 'info',
                            default => 'gray'
                        })
                        ->formatStateUsing(fn (string $state): string => match ($state) {
                            'busta_paga' => 'BP',
                            'aziendale' => 'AZ',
                            'personale' => 'PS',
                            default => $state
                        })
                        ->width('60px'),
                    Tables\Columns\TextColumn::make('nome')
                        ->searchable()
                        ->label('Documento')
                        ->wrap()
                        ->limit(25)
                        ->tooltip(fn ($record) => $record->nome),
                    Tables\Columns\TextColumn::make('created_at')
                        ->dateTime('d/m')
                        ->sortable()
                        ->label('Data')
                        ->width('50px'),
                ])
                ->filters([
                    Tables\Filters\SelectFilter::make('tipo')
                        ->options([
                            'busta_paga' => 'Busta Paga',
                            'aziendale' => 'Aziendale',
                            'personale' => 'Personale'
                        ])
                        ->label('Tipo'),
                    Tables\Filters\SelectFilter::make('user_id')
                        ->relationship('user', 'name')
                        ->searchable()
                        ->label('Utente'),
                ])
                ->actions([
                    Tables\Actions\Action::make('open')
                        ->label('')
                        ->icon('heroicon-o-pencil-square')
                        ->tooltip('Modifica documento')
                        ->color('primary')
                        ->url(fn (Documento $record): string => static::getUrl('edit', ['record' => $record]))
                        ->size('sm'),
                    Tables\Actions\Action::make('download')
                        ->label('')
                        ->icon('heroicon-o-arrow-down-tray')
                        ->tooltip('Scarica documento')
                        ->action(function (Documento $record) {
                            if (!$record->file || !Storage::disk('public')->exists($record->file)) {
                                \Filament\Notifications\Notification::make()
                                    ->title('File non trovato')
                                    ->danger()
                                    ->send();
                                return;
                            }
                            return Storage::disk('public')->download(
                                $record->file,
                                $record->nome . '.' . pathinfo($record->file, PATHINFO_EXTENSION)
                            );
                        })
                        ->size('sm'),
                ])
                ->bulkActions([])
                ->defaultSort('created_at', 'desc')
                ->paginated([10, 25]);
        }

        return $table
            ->modifyQueryUsing(function (Builder $query) {
                $userId = auth()->id();
                $query->where(function($q) use ($userId) {
                    $q->where('user_id', $userId)
                      ->orWhere('tipo', 'aziendale');
                });
            })
            ->columns([
                Tables\Columns\TextColumn::make('tipo')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'busta_paga' => 'success',
                        'aziendale' => 'warning',
                        'personale' => 'info',
                        default => 'gray'
                    })
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'busta_paga' => 'BP',
                        'aziendale' => 'AZ',
                        'personale' => 'PS',
                        default => $state
                    })
                    ->width('60px'),
                Tables\Columns\TextColumn::make('nome')
                    ->searchable()
                    ->label('Documento')
                    ->wrap()
                    ->limit(25)
                    ->tooltip(fn ($record) => $record->nome),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime('d/m')
                    ->sortable()
                    ->label('Data')
                    ->width('50px'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('tipo')
                    ->options([
                        'busta_paga' => 'Busta Paga',
                        'aziendale' => 'Aziendale',
                        'personale' => 'Personale'
                    ])
                    ->label('Tipo'),
            ])
            ->actions([
                Tables\Actions\Action::make('open')
                    ->label('')
                    ->icon('heroicon-o-eye')
                    ->tooltip('Visualizza documento')
                    ->color('primary')
                    ->url(fn (Documento $record): string => static::getUrl('view', ['record' => $record]))
                    ->size('sm'),
                Tables\Actions\Action::make('download')
                    ->label('')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->tooltip('Scarica documento')
                    ->action(function (Documento $record) {
                        if (!$record->file || !Storage::disk('public')->exists($record->file)) {
                            \Filament\Notifications\Notification::make()
                                ->title('File non trovato')
                                ->danger()
                                ->send();
                            return;
                        }
                        return Storage::disk('public')->download(
                            $record->file,
                            $record->nome . '.' . pathinfo($record->file, PATHINFO_EXTENSION)
                        );
                    })
                    ->size('sm'),
            ])
            ->bulkActions([])
            ->defaultSort('created_at', 'desc')
            ->paginated([10, 25]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListDocumenti::route('/'),
            'create' => Pages\CreateDocumento::route('/create'),
            'view' => Pages\ViewDocumento::route('/{record}'),
            'edit' => Pages\EditDocumento::route('/{record}/edit'),
        ];
    }

    public static function canEdit($record): bool
    {
        $user = auth()->user();
        if ($user->isAdmin() || $user->isManager()) {
            return true;
        }
        return $record->user_id === $user->id && $record->tipo === 'personale';
    }

    public static function canDelete($record): bool
    {
        $user = auth()->user();
        if ($user->isAdmin() || $user->isManager()) {
            return true;
        }
        return $record->user_id === $user->id && $record->tipo === 'personale';
    }
}
